// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package server

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type RESCODE int64
const (
  RESCODE__200 RESCODE = 200
  RESCODE__400 RESCODE = 400
  RESCODE__403 RESCODE = 403
  RESCODE__404 RESCODE = 404
  RESCODE__500 RESCODE = 500
  RESCODE__503 RESCODE = 503
)

func (p RESCODE) Int() int {
  switch p {
  case RESCODE__200:
    return 200
  case RESCODE__400:
    return 400
  case RESCODE__403:
    return 403
  case RESCODE__404:
    return 404
  case RESCODE__500:
    return 500
  case RESCODE__503:
    return 503
  default:
    return 200
  }
}

func (p RESCODE) String() string {
  switch p {
  case RESCODE__200:
    return "_200"
  case RESCODE__400:
    return "_400"
  case RESCODE__403:
    return "_403"
  case RESCODE__404:
    return "_404"
  case RESCODE__500:
    return "_500"
  case RESCODE__503:
    return "_503"
  }
  return "<UNSET>"
}

func RESCODEFromString(s string) (RESCODE, error) {
  switch s {
  case "_200":
    return RESCODE__200, nil
  case "400":
    return RESCODE__400, nil
  case "_404":
    return RESCODE__404, nil
  case "_500":
    return RESCODE__500, nil
  case "_503":
    return RESCODE__503, nil
  }
  return RESCODE(0), fmt.Errorf("not a valid RESCODE string")
}


func RESCODEPtr(v RESCODE) *RESCODE { return &v }

func (p RESCODE) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RESCODE) UnmarshalText(text []byte) error {
q, err := RESCODEFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RESCODE) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RESCODE(v)
return nil
}

func (p * RESCODE) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EXCCODE int64
const (
  EXCCODE_PARAMNOTFOUND EXCCODE = 2001
  EXCCODE_SERVICENOTFOUND EXCCODE = 2002
)

func (p EXCCODE) String() string {
  switch p {
  case EXCCODE_PARAMNOTFOUND: return "PARAMNOTFOUND"
  case EXCCODE_SERVICENOTFOUND: return "SERVICENOTFOUND"
  }
  return "<UNSET>"
}

func EXCCODEFromString(s string) (EXCCODE, error) {
  switch s {
  case "PARAMNOTFOUND": return EXCCODE_PARAMNOTFOUND, nil 
  case "SERVICENOTFOUND": return EXCCODE_SERVICENOTFOUND, nil 
  }
  return EXCCODE(0), fmt.Errorf("not a valid EXCCODE string")
}


func EXCCODEPtr(v EXCCODE) *EXCCODE { return &v }

func (p EXCCODE) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EXCCODE) UnmarshalText(text []byte) error {
q, err := EXCCODEFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EXCCODE) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EXCCODE(v)
return nil
}

func (p * EXCCODE) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ParamJSON
//  - ServiceName
//  - Operation
type Request struct {
  ParamJSON []byte `thrift:"paramJSON,1,required" db:"paramJSON" json:"paramJSON"`
  ServiceName string `thrift:"serviceName,2,required" db:"serviceName" json:"serviceName"`
  Operation string `thrift:"operation,3" db:"operation" json:"operation"`
}

func NewRequest() *Request {
  return &Request{}
}


func (p *Request) GetParamJSON() []byte {
  return p.ParamJSON
}

func (p *Request) GetServiceName() string {
  return p.ServiceName
}

func (p *Request) GetOperation() string {
  return p.Operation
}
func (p *Request) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetParamJSON bool = false;
  var issetServiceName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetParamJSON = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetServiceName = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetParamJSON{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ParamJSON is not set"));
  }
  if !issetServiceName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"));
  }
  return nil
}

func (p *Request)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ParamJSON = v
}
  return nil
}

func (p *Request)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ServiceName = v
}
  return nil
}

func (p *Request)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Operation = v
}
  return nil
}

func (p *Request) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Request) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("paramJSON", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:paramJSON: ", p), err) }
  if err := oprot.WriteBinary(p.ParamJSON); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.paramJSON (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:paramJSON: ", p), err) }
  return err
}

func (p *Request) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceName: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceName: ", p), err) }
  return err
}

func (p *Request) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("operation", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:operation: ", p), err) }
  if err := oprot.WriteString(string(p.Operation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.operation (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:operation: ", p), err) }
  return err
}

func (p *Request) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Request(%+v)", *p)
}

// Attributes:
//  - ResponeCode
//  - ResponseJSON
type Response struct {
  ResponeCode RESCODE `thrift:"responeCode,1,required" db:"responeCode" json:"responeCode"`
  ResponseJSON []byte `thrift:"responseJSON,2,required" db:"responseJSON" json:"responseJSON"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetResponeCode() RESCODE {
  return p.ResponeCode
}

func (p *Response) GetResponseJSON() []byte {
  return p.ResponseJSON
}
func (p *Response) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResponeCode bool = false;
  var issetResponseJSON bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResponeCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetResponseJSON = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResponeCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResponeCode is not set"));
  }
  if !issetResponseJSON{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResponseJSON is not set"));
  }
  return nil
}

func (p *Response)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := RESCODE(v)
  p.ResponeCode = temp
}
  return nil
}

func (p *Response)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ResponseJSON = v
}
  return nil
}

func (p *Response) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("responeCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responeCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ResponeCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.responeCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responeCode: ", p), err) }
  return err
}

func (p *Response) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("responseJSON", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:responseJSON: ", p), err) }
  if err := oprot.WriteBinary(p.ResponseJSON); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.responseJSON (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:responseJSON: ", p), err) }
  return err
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

// Attributes:
//  - ExceptionCode
//  - ExceptionMess
type ServiceException struct {
  ExceptionCode EXCCODE `thrift:"exceptionCode,1,required" db:"exceptionCode" json:"exceptionCode"`
  ExceptionMess string `thrift:"exceptionMess,2,required" db:"exceptionMess" json:"exceptionMess"`
}

func NewServiceException() *ServiceException {
  return &ServiceException{}
}


func (p *ServiceException) GetExceptionCode() EXCCODE {
  return p.ExceptionCode
}

func (p *ServiceException) GetExceptionMess() string {
  return p.ExceptionMess
}
func (p *ServiceException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetExceptionCode bool = false;
  var issetExceptionMess bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetExceptionCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetExceptionMess = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetExceptionCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExceptionCode is not set"));
  }
  if !issetExceptionMess{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExceptionMess is not set"));
  }
  return nil
}

func (p *ServiceException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := EXCCODE(v)
  p.ExceptionCode = temp
}
  return nil
}

func (p *ServiceException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExceptionMess = v
}
  return nil
}

func (p *ServiceException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ServiceException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exceptionCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:exceptionCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExceptionCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exceptionCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:exceptionCode: ", p), err) }
  return err
}

func (p *ServiceException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exceptionMess", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:exceptionMess: ", p), err) }
  if err := oprot.WriteString(string(p.ExceptionMess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exceptionMess (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:exceptionMess: ", p), err) }
  return err
}

func (p *ServiceException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceException(%+v)", *p)
}

func (p *ServiceException) Error() string {
  return p.String()
}

type MyService interface {
  // Parameters:
  //  - Request
  Send(request *Request) (r *Response, err error)
}

type MyServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewMyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MyServiceClient {
  return &MyServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewMyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MyServiceClient {
  return &MyServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Request
func (p *MyServiceClient) Send(request *Request) (r *Response, err error) {
  if err = p.sendSend(request); err != nil { return }
  return p.recvSend()
}

func (p *MyServiceClient) sendSend(request *Request)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("send", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MyServiceSendArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MyServiceClient) recvSend() (value *Response, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "send" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "send failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "send failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "send failed: invalid message type")
    return
  }
  result := MyServiceSendResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}


type MyServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MyService
}

func (p *MyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMyServiceProcessor(handler MyService) *MyServiceProcessor {

  self2 := &MyServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["send"] = &myServiceProcessorSend{handler:handler}
return self2
}

func (p *MyServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x3

}

type myServiceProcessorSend struct {
  handler MyService
}

func (p *myServiceProcessorSend) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MyServiceSendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("send", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MyServiceSendResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.Send(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing send: " + err2.Error())
    oprot.WriteMessageBegin("send", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("send", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type MyServiceSendArgs struct {
  Request *Request `thrift:"request,1,required" db:"request" json:"request"`
}

func NewMyServiceSendArgs() *MyServiceSendArgs {
  return &MyServiceSendArgs{}
}

var MyServiceSendArgs_Request_DEFAULT *Request
func (p *MyServiceSendArgs) GetRequest() *Request {
  if !p.IsSetRequest() {
    return MyServiceSendArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MyServiceSendArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MyServiceSendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequest bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetRequest = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequest{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Request is not set"));
  }
  return nil
}

func (p *MyServiceSendArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &Request{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MyServiceSendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("send_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceSendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MyServiceSendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MyServiceSendArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type MyServiceSendResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ServiceException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewMyServiceSendResult() *MyServiceSendResult {
  return &MyServiceSendResult{}
}

var MyServiceSendResult_Success_DEFAULT *Response
func (p *MyServiceSendResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return MyServiceSendResult_Success_DEFAULT
  }
return p.Success
}
var MyServiceSendResult_E_DEFAULT *ServiceException
func (p *MyServiceSendResult) GetE() *ServiceException {
  if !p.IsSetE() {
    return MyServiceSendResult_E_DEFAULT
  }
return p.E
}
func (p *MyServiceSendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MyServiceSendResult) IsSetE() bool {
  return p.E != nil
}

func (p *MyServiceSendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyServiceSendResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MyServiceSendResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &ServiceException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *MyServiceSendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("send_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyServiceSendResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MyServiceSendResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *MyServiceSendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MyServiceSendResult(%+v)", *p)
}


